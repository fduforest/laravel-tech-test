{"version":3,"sources":["menu.js","game.js","game_over.js","main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["var baseUrl = window.location.origin;\nvar currentUrl = window.location.href;\n\nvar Menu = {\n\n    preload : function() {\n        // Load all the needed resources for the menu.\n        game.load.image('menu', baseUrl + '/images/menu.png');\n    },\n\n    create: function () {\n\n        // Add menu screen.\n        // It will act as a button to start the game.\n        this.add.button(0, 0, 'menu', this.startGame, this);\n\n    },\n\n    startGame: function () {\n\n        // Change the state to the actual game.\n        this.state.start('Game');\n\n    }\n\n};","var snake, apple, squareSize, score, speed,\n    updateDelay, direction, new_direction,\n    addNew, cursors, scoreTextValue, speedTextValue, textStyle_Key, textStyle_Value;\n\nvar Game = {\n\n    preload : function() {\n        // Here we load all the needed resources for the level.\n        // In our case, that's just two squares - one for the snake body and one for the apple.\n        game.load.image('snake', baseUrl + '/images/snake.png');\n        game.load.image('apple', baseUrl + '/images/apple.png');\n    },\n\n    create : function() {\n\n        // By setting up global variables in the create function, we initialise them on game start.\n        // We need them to be globally available so that the update function can alter them.\n\n        snake = [];                     // This will work as a stack, containing the parts of our snake\n        apple = {};                     // An object for the apple;\n        squareSize = 15;                // The length of a side of the squares. Our image is 15x15 pixels.\n        score = 0;                      // Game score.\n        speed = 0;                      // Game speed.\n        updateDelay = 0;                // A variable for control over update rates.\n        direction = 'right';            // The direction of our snake.\n        new_direction = null;           // A buffer to store the new direction into.\n        addNew = false;                 // A variable used when an apple has been eaten.\n\n        // Set up a Phaser controller for keyboard input.\n        cursors = game.input.keyboard.createCursorKeys();\n\n        game.stage.backgroundColor = '#061f27';\n\n        // Generate the initial snake stack. Our snake will be 10 elements long.\n        for(var i = 0; i < 10; i++){\n            snake[i] = game.add.sprite(150+i*squareSize, 150, 'snake');  // Parameters are (X coordinate, Y coordinate, image)\n        }\n\n\n        // Genereate the first apple.\n        this.generateApple();\n\n        // Add Text to top of game.\n        textStyle_Key = { font: \"bold 14px sans-serif\", fill: \"#46c0f9\", align: \"center\" };\n        textStyle_Value = { font: \"bold 18px sans-serif\", fill: \"#fff\", align: \"center\" };\n\n        // Score.\n        game.add.text(30, 20, \"SCORE\", textStyle_Key);\n        scoreTextValue = game.add.text(90, 18, score.toString(), textStyle_Value);\n        // Speed.\n        game.add.text(500, 20, \"SPEED\", textStyle_Key);\n        speedTextValue = game.add.text(558, 18, speed.toString(), textStyle_Value);\n\n    },\n\n    update: function() {\n\n        // Handle arrow key presses, while not allowing illegal direction changes that will kill the player.\n\n        if (cursors.right.isDown && direction!='left')\n        {\n            new_direction = 'right';\n        }\n        else if (cursors.left.isDown && direction!='right')\n        {\n            new_direction = 'left';\n        }\n        else if (cursors.up.isDown && direction!='down')\n        {\n            new_direction = 'up';\n        }\n        else if (cursors.down.isDown && direction!='up')\n        {\n            new_direction = 'down';\n        }\n\n        // A formula to calculate game speed based on the score.\n        // The higher the score, the higher the game speed, with a maximum of 10;\n        speed = Math.min(10, Math.floor(score/5));\n        // Update speed value on game screen.\n        speedTextValue.text = '' + speed;\n\n        // Since the update function of Phaser has an update rate of around 60 FPS,\n        // we need to slow that down make the game playable.\n\n        // Increase a counter on every update call.\n        updateDelay++;\n\n        // Do game stuff only if the counter is aliquot to (10 - the game speed).\n        // The higher the speed, the more frequently this is fulfilled,\n        // making the snake move faster.\n        if (updateDelay % (10 - speed) == 0) {\n\n\n            // Snake movement\n\n            var firstCell = snake[snake.length - 1],\n                lastCell = snake.shift(),\n                oldLastCellx = lastCell.x,\n                oldLastCelly = lastCell.y;\n\n            // If a new direction has been chosen from the keyboard, make it the direction of the snake now.\n            if(new_direction){\n                direction = new_direction;\n                new_direction = null;\n            }\n\n\n            // Change the last cell's coordinates relative to the head of the snake, according to the direction.\n\n            if(direction == 'right'){\n\n                lastCell.x = firstCell.x + 15;\n                lastCell.y = firstCell.y;\n            }\n            else if(direction == 'left'){\n                lastCell.x = firstCell.x - 15;\n                lastCell.y = firstCell.y;\n            }\n            else if(direction == 'up'){\n                lastCell.x = firstCell.x;\n                lastCell.y = firstCell.y - 15;\n            }\n            else if(direction == 'down'){\n                lastCell.x = firstCell.x;\n                lastCell.y = firstCell.y + 15;\n            }\n\n\n            // Place the last cell in the front of the stack.\n            // Mark it as the first cell.\n\n            snake.push(lastCell);\n            firstCell = lastCell;\n\n            // End of snake movement.\n\n\n\n            // Increase length of snake if an apple had been eaten.\n            // Create a block in the back of the snake with the old position of the previous last block (it has moved now along with the rest of the snake).\n            if(addNew){\n                snake.unshift(game.add.sprite(oldLastCellx, oldLastCelly, 'snake'));\n                addNew = false;\n            }\n\n            // Check for apple collision.\n            this.appleCollision();\n\n            // Check for collision with self. Parameter is the head of the snake.\n            this.selfCollision(firstCell);\n\n            // Check with collision with wall. Parameter is the head of the snake.\n            this.wallCollision(firstCell);\n        }\n\n\n    },\n\n    generateApple: function(){\n\n        // Chose a random place on the grid.\n        // X is between 0 and 585 (39*15)\n        // Y is between 0 and 435 (29*15)\n\n        var randomX = Math.floor(Math.random() * 40 ) * squareSize,\n            randomY = Math.floor(Math.random() * 30 ) * squareSize;\n\n        // Add a new apple.\n        apple = game.add.sprite(randomX, randomY, 'apple');\n    },\n\n    appleCollision: function() {\n\n        // Check if any part of the snake is overlapping the apple.\n        // This is needed if the apple spawns inside of the snake.\n        for(var i = 0; i < snake.length; i++){\n            if(snake[i].x == apple.x && snake[i].y == apple.y){\n\n                // Next time the snake moves, a new block will be added to its length.\n                addNew = true;\n\n                // Destroy the old apple.\n                apple.destroy();\n\n                // Make a new one.\n                this.generateApple();\n\n                // Increase score.\n                score++;\n\n                // Refresh scoreboard.\n                scoreTextValue.text = score.toString();\n\n            }\n        }\n\n    },\n\n    selfCollision: function(head) {\n\n        // Check if the head of the snake overlaps with any part of the snake.\n        for(var i = 0; i < snake.length - 1; i++){\n            if(head.x == snake[i].x && head.y == snake[i].y){\n\n                // If so, go to game over screen.\n                game.state.start('Game_Over');\n            }\n        }\n\n    },\n\n    wallCollision: function(head) {\n\n        // Check if the head of the snake is in the boundaries of the game field.\n\n        if(head.x >= 600 || head.x < 0 || head.y >= 450 || head.y < 0){\n\n\n            // If it's not in, we've hit a wall. Go to game over screen.\n            game.state.start('Game_Over');\n        }\n\n    }\n\n};","var Game_Over = {\n\n    preload : function() {\n        // Here we load all the needed resources for the level.\n        // In our case, that's just two squares - one for the snake body and one for the apple.\n        game.load.image('gameover', baseUrl + '/images/gameover.png');\n    },\n\n    create : function() {\n\n        // Create button to start game similar to the main menu.\n        this.add.button(0, 0, 'gameover', this.startGame, this);\n\n        // Last Score Info.\n        game.add.text(235, 350, \"LAST SCORE\", { font: \"bold 16px sans-serif\", fill: \"#46c0f9\", align: \"center\"});\n        game.add.text(350, 348, score.toString(), { font: \"bold 20px sans-serif\", fill: \"#fff\", align: \"center\" });\n\n        // Send user score to profileController in order to register it in db\n        $.ajax({\n            url: currentUrl,\n            headers: {'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')},\n            data: {\n                score: score.toString()\n            },\n            type: 'Post'\n        });\n\n    },\n\n    startGame: function () {\n\n        // Change the state to the actual game.\n        this.state.start('Game');\n\n    }\n\n};","\nvar game;\n\ngame = new Phaser.Game(600, 450, Phaser.AUTO, '');\n\ngame.state.add('Menu', Menu);\ngame.state.add('Game', Game);\ngame.state.add('Game_Over', Game_Over);\n\n\ngame.state.start('Menu');"],"sourceRoot":"/source/"}